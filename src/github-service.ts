import { getOctokit } from '@actions/github'
import { context } from '@actions/github'

export type SupportedLanguage = 'en' | 'zh' | 'ja' | 'ko' | 'es' | 'fr' | 'de' | 'pt' | 'ru' | 'it' | 'nl' | 'ar'

export interface CommentTemplate {
  greeting: string
  explanation: string
  reasoningLabel: string
  actionPrompt: string
  footer: string
}

// Base English template - all other languages will translate from this
const BASE_TEMPLATE: CommentTemplate = {
  greeting: 'Hi @{author}! 👋',
  explanation: "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:",
  reasoningLabel: '**Reasoning:**',
  actionPrompt: 'Would you like me to update the title automatically, or would you prefer to update it yourself?',
  footer: '*This comment was generated by the Conventional PR Title Action*'
}

// Simple translation function using fallback translations
function translateText(text: string, targetLanguage: SupportedLanguage): string {
  if (targetLanguage === 'en') return text
  
  // Simple translations for key phrases
  const translations: Record<SupportedLanguage, Record<string, string>> = {
    en: {},
    zh: {
      'Hi @{author}! 👋': '你好 @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": '我注意到您的PR标题不符合 [Conventional Commits](https://www.conventionalcommits.org/) 标准。以下是一些建议：',
      '**Reasoning:**': '**原因：**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': '您希望我自动更新标题，还是您自己更新？',
      '*This comment was generated by the Conventional PR Title Action*': '*此评论由 Conventional PR Title Action 自动生成*'
    },
    ja: {
      'Hi @{author}! 👋': 'こんにちは @{author}さん! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'PRタイトルが [Conventional Commits](https://www.conventionalcommits.org/) 標準に従っていないことに気づきました。以下が提案です：',
      '**Reasoning:**': '**理由：**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'タイトルを自動的に更新しますか、それともご自身で更新されますか？',
      '*This comment was generated by the Conventional PR Title Action*': '*このコメントは Conventional PR Title Action によって生成されました*'
    },
    ko: {
      'Hi @{author}! 👋': '안녕하세요 @{author}님! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'PR 제목이 [Conventional Commits](https://www.conventionalcommits.org/) 표준을 따르지 않는 것을 발견했습니다. 다음은 제안사항입니다:',
      '**Reasoning:**': '**이유:**', 
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': '제목을 자동으로 업데이트할까요, 아니면 직접 업데이트하시겠습니까?',
      '*This comment was generated by the Conventional PR Title Action*': '*이 댓글은 Conventional PR Title Action에 의해 생성되었습니다*'
    },
    es: {
      'Hi @{author}! 👋': '¡Hola @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'He notado que el título de tu PR no sigue el estándar de [Conventional Commits](https://www.conventionalcommits.org/). Aquí tienes algunas sugerencias:',
      '**Reasoning:**': '**Razón:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': '¿Te gustaría que actualice el título automáticamente, o prefieres actualizarlo tú mismo?',
      '*This comment was generated by the Conventional PR Title Action*': '*Este comentario fue generado por Conventional PR Title Action*'
    },
    fr: {
      'Hi @{author}! 👋': 'Salut @{author} ! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": "J'ai remarqué que le titre de votre PR ne suit pas le standard [Conventional Commits](https://www.conventionalcommits.org/). Voici quelques suggestions :",
      '**Reasoning:**': '**Raison :**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'Souhaitez-vous que je mette à jour le titre automatiquement, ou préférez-vous le mettre à jour vous-même ?',
      '*This comment was generated by the Conventional PR Title Action*': '*Ce commentaire a été généré par Conventional PR Title Action*'
    },
    de: {
      'Hi @{author}! 👋': 'Hallo @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'Mir ist aufgefallen, dass dein PR-Titel nicht dem [Conventional Commits](https://www.conventionalcommits.org/) Standard folgt. Hier sind einige Vorschläge:',
      '**Reasoning:**': '**Grund:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'Möchtest du, dass ich den Titel automatisch aktualisiere, oder würdest du ihn lieber selbst aktualisieren?',
      '*This comment was generated by the Conventional PR Title Action*': '*Dieser Kommentar wurde von Conventional PR Title Action generiert*'
    },
    pt: {
      'Hi @{author}! 👋': 'Olá @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'Notei que o título do seu PR não segue o padrão [Conventional Commits](https://www.conventionalcommits.org/). Aqui estão algumas sugerências:',
      '**Reasoning:**': '**Motivo:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'Gostaria que eu atualizasse o título automaticamente, ou prefere atualizar você mesmo?',
      '*This comment was generated by the Conventional PR Title Action*': '*Este comentário foi gerado pelo Conventional PR Title Action*'
    },
    ru: {
      'Hi @{author}! 👋': 'Привет @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'Я заметил, что название вашего PR не соответствует стандарту [Conventional Commits](https://www.conventionalcommits.org/). Вот несколько предложений:',
      '**Reasoning:**': '**Причина:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'Хотите, чтобы я автоматически обновил заголовок, или вы предпочитаете обновить его сами?',
      '*This comment was generated by the Conventional PR Title Action*': '*Этот комментарий был создан Conventional PR Title Action*'
    },
    it: {
      'Hi @{author}! 👋': 'Ciao @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'Ho notato che il titolo del tuo PR non segue lo standard [Conventional Commits](https://www.conventionalcommits.org/). Ecco alcuni suggerimenti:',
      '**Reasoning:**': '**Motivo:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'Vorresti che aggiorni il titolo automaticamente, o preferisci aggiornarlo tu stesso?',
      '*This comment was generated by the Conventional PR Title Action*': '*Questo commento è stato generato da Conventional PR Title Action*'
    },
    nl: {
      'Hi @{author}! 👋': 'Hoi @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'Ik heb gemerkt dat je PR-titel niet voldoet aan de [Conventional Commits](https://www.conventionalcommits.org/) standaard. Hier zijn enkele suggesties:',
      '**Reasoning:**': '**Reden:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'Wil je dat ik de titel automatisch bijwerk, of werk je hem liever zelf bij?',
      '*This comment was generated by the Conventional PR Title Action*': '*Dit commentaar is gegenereerd door Conventional PR Title Action*'
    },
    ar: {
      'Hi @{author}! 👋': 'مرحبا @{author}! 👋',
      "I noticed your PR title doesn't follow the [Conventional Commits](https://www.conventionalcommits.org/) standard. Here are some suggestions:": 'لاحظت أن عنوان طلب السحب الخاص بك لا يتبع معيار [Conventional Commits](https://www.conventionalcommits.org/). إليك بعض الاقتراحات:',
      '**Reasoning:**': '**السبب:**',
      'Would you like me to update the title automatically, or would you prefer to update it yourself?': 'هل تريد مني تحديث العنوان تلقائياً، أم تفضل تحديثه بنفسك؟',
      '*This comment was generated by the Conventional PR Title Action*': '*تم إنشاء هذا التعليق بواسطة Conventional PR Title Action*'
    }
  }
  
  return translations[targetLanguage]?.[text] || text
}

// Get translated template for a language
function getLocalizedTemplate(language: SupportedLanguage): CommentTemplate {
  return {
    greeting: translateText(BASE_TEMPLATE.greeting, language),
    explanation: translateText(BASE_TEMPLATE.explanation, language),
    reasoningLabel: translateText(BASE_TEMPLATE.reasoningLabel, language),
    actionPrompt: translateText(BASE_TEMPLATE.actionPrompt, language),
    footer: translateText(BASE_TEMPLATE.footer, language)
  }
}

export interface GitHubConfig {
  token: string
  owner?: string
  repo?: string
}

export interface PRInfo {
  number: number
  title: string
  body: string | null
  author: string
  headRef: string
  baseRef: string
  changedFiles?: string[]
  labels: string[]
  isDraft: boolean
}

export interface PRComment {
  id: number
  body: string
  author: string
  createdAt: string
}

export interface GitHubService {
  getPRInfo(prNumber: number): Promise<PRInfo>
  updatePRTitle(prNumber: number, newTitle: string): Promise<void>
  createComment(prNumber: number, body: string): Promise<PRComment>
  getChangedFiles(prNumber: number): Promise<string[]>
  checkPermissions(): Promise<boolean>
}

export class OctokitGitHubService implements GitHubService {
  private octokit: ReturnType<typeof getOctokit>
  private owner: string
  private repo: string

  constructor(config: GitHubConfig) {
    this.octokit = getOctokit(config.token)

    // Use provided owner/repo or get from context
    this.owner = config.owner !== undefined ? config.owner : context.repo.owner
    this.repo = config.repo !== undefined ? config.repo : context.repo.repo

    if (!this.owner || !this.repo || this.owner === '' || this.repo === '') {
      throw new Error(
        'GitHub repository owner and name must be provided or available in context'
      )
    }
  }

  async getPRInfo(prNumber: number): Promise<PRInfo> {
    try {
      const { data: pr } = await this.octokit.rest.pulls.get({
        owner: this.owner,
        repo: this.repo,
        pull_number: prNumber
      })

      return {
        number: pr.number,
        title: pr.title,
        body: pr.body,
        author: pr.user?.login || 'unknown',
        headRef: pr.head.ref,
        baseRef: pr.base.ref,
        labels: pr.labels.map(label =>
          typeof label === 'string' ? label : label.name || ''
        ),
        isDraft: pr.draft || false
      }
    } catch (error) {
      throw new Error(
        `Failed to get PR info: ${error instanceof Error ? error.message : 'Unknown error'}`
      )
    }
  }

  async updatePRTitle(prNumber: number, newTitle: string): Promise<void> {
    try {
      await this.octokit.rest.pulls.update({
        owner: this.owner,
        repo: this.repo,
        pull_number: prNumber,
        title: newTitle
      })
    } catch (error) {
      throw new Error(
        `Failed to update PR title: ${error instanceof Error ? error.message : 'Unknown error'}`
      )
    }
  }

  async createComment(prNumber: number, body: string): Promise<PRComment> {
    try {
      const { data: comment } = await this.octokit.rest.issues.createComment({
        owner: this.owner,
        repo: this.repo,
        issue_number: prNumber,
        body
      })

      return {
        id: comment.id,
        body: comment.body || '',
        author: comment.user?.login || 'unknown',
        createdAt: comment.created_at
      }
    } catch (error) {
      throw new Error(
        `Failed to create comment: ${error instanceof Error ? error.message : 'Unknown error'}`
      )
    }
  }

  async getChangedFiles(prNumber: number): Promise<string[]> {
    try {
      const { data: files } = await this.octokit.rest.pulls.listFiles({
        owner: this.owner,
        repo: this.repo,
        pull_number: prNumber
      })

      return files.map(file => file.filename)
    } catch (error) {
      throw new Error(
        `Failed to get changed files: ${error instanceof Error ? error.message : 'Unknown error'}`
      )
    }
  }

  async checkPermissions(): Promise<boolean> {
    try {
      // Try to get repository info to check read permissions
      await this.octokit.rest.repos.get({
        owner: this.owner,
        repo: this.repo
      })

      // Try to check if we have write permissions by getting the current user's permission level
      const { data: permission } =
        await this.octokit.rest.repos.getCollaboratorPermissionLevel({
          owner: this.owner,
          repo: this.repo,
          username: await this.getCurrentUser()
        })

      return ['admin', 'write'].includes(permission.permission)
    } catch (error) {
      console.warn('Permission check failed:', error)
      return false
    }
  }

  private async getCurrentUser(): Promise<string> {
    try {
      const { data: user } = await this.octokit.rest.users.getAuthenticated()
      return user.login
    } catch (error) {
      throw new Error(
        `Failed to get current user: ${error instanceof Error ? error.message : 'Unknown error'}`
      )
    }
  }
}

// Utility functions for common operations
export async function createGitHubService(
  token?: string
): Promise<GitHubService> {
  const githubToken = token || process.env.GITHUB_TOKEN

  if (!githubToken) {
    throw new Error(
      'GitHub token is required. Set GITHUB_TOKEN environment variable or provide token parameter.'
    )
  }

  return new OctokitGitHubService({ token: githubToken })
}

export async function getPRInfoFromContext(): Promise<PRInfo | null> {
  if (
    context.eventName !== 'pull_request' &&
    context.eventName !== 'pull_request_target'
  ) {
    return null
  }

  const prNumber = context.payload.pull_request?.number
  if (!prNumber) {
    return null
  }

  const service = await createGitHubService()
  return service.getPRInfo(prNumber)
}

// Language detection utility functions
export function detectLanguage(text: string): SupportedLanguage {
  const cleanText = text.toLowerCase()
  
  // Chinese detection
  if (/[\u4e00-\u9fff]/.test(text)) {
    return 'zh'
  }
  
  // Japanese detection (Hiragana, Katakana, Kanji)
  if (/[\u3040-\u309f\u30a0-\u30ff\u4e00-\u9fff]/.test(text) && /[\u3040-\u309f\u30a0-\u30ff]/.test(text)) {
    return 'ja'
  }
  
  // Korean detection
  if (/[\uac00-\ud7af\u1100-\u11ff\u3130-\u318f]/.test(text)) {
    return 'ko'
  }
  
  // Spanish keywords detection
  if (/\b(español|cambios?|añadir|agregar|corregir|actualizar|mejorar)\b/.test(cleanText)) {
    return 'es'
  }
  
  // French keywords detection  
  if (/\b(français|ajouter|corriger|mettre à jour|améliorer|modification)\b/.test(cleanText)) {
    return 'fr'
  }
  
  // German keywords detection
  if (/\b(deutsch|hinzufügen|korrigieren|aktualisieren|verbessern|änderung)\b/.test(cleanText)) {
    return 'de'
  }
  
  // Portuguese keywords detection
  if (/\b(português|adicionar|corrigir|atualizar|melhorar|alteração)\b/.test(cleanText)) {
    return 'pt'
  }
  
  // Russian keywords detection
  if (/\b(русский|добавить|исправить|обновить|улучшить|изменение)\b/.test(cleanText) || /[а-яё]/i.test(text)) {
    return 'ru'
  }
  
  // Italian keywords detection
  if (/\b(italiano|aggiungere|correggere|aggiornare|migliorare|modifica)\b/.test(cleanText)) {
    return 'it'
  }
  
  // Dutch keywords detection
  if (/\b(nederlands|toevoegen|corrigeren|bijwerken|verbeteren|wijziging)\b/.test(cleanText)) {
    return 'nl'
  }
  
  // Arabic detection
  if (/[\u0600-\u06ff]/.test(text)) {
    return 'ar'
  }
  
  // Default to English
  return 'en'
}

export function detectLanguageFromPR(prInfo: PRInfo): SupportedLanguage {
  const textToAnalyze = [
    prInfo.title,
    prInfo.body || '',
  ].join(' ')
  
  return detectLanguage(textToAnalyze)
}

// Utility function to format comment body with mentions and language support
export function formatCommentWithMention(
  author: string,
  suggestions: string[],
  reasoning: string,
  language?: SupportedLanguage,
  prInfo?: PRInfo
): string {
  // Auto-detect language if not provided
  const detectedLanguage = language || (prInfo ? detectLanguageFromPR(prInfo) : 'en')
  
  const template = getLocalizedTemplate(detectedLanguage)
  
  const suggestionsList = suggestions
    .map((suggestion, index) => `${index + 1}. \`${suggestion}\``)
    .join('\n')

  return `${template.greeting.replace('{author}', author)}

${template.explanation}

${suggestionsList}

${template.reasoningLabel} ${reasoning}

${template.actionPrompt}

---
${template.footer}`
}

// Retry wrapper for GitHub API calls
export async function withRetry<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  delayMs: number = 1000
): Promise<T> {
  let lastError: Error

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation()
    } catch (error) {
      lastError = error instanceof Error ? error : new Error(String(error))

      // Don't retry on authentication or permission errors
      if (
        lastError.message.includes('401') ||
        lastError.message.includes('403')
      ) {
        throw lastError
      }

      if (attempt === maxRetries) {
        throw new Error(
          `Operation failed after ${maxRetries} attempts: ${lastError.message}`
        )
      }

      // Exponential backoff
      await new Promise(resolve =>
        setTimeout(resolve, delayMs * Math.pow(2, attempt - 1))
      )
    }
  }

  throw lastError!
}